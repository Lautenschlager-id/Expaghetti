[1mdiff --git a/expaghetti/magic/group.lua b/expaghetti/magic/group.lua[m
[1mindex ed55c4f..2259efb 100644[m
[1m--- a/expaghetti/magic/group.lua[m
[1m+++ b/expaghetti/magic/group.lua[m
[36m@@ -189,30 +189,40 @@[m [mGroup.parse = function(parser, index, tree, expression, expressionLength, charac[m
 	return index + 1[m
 end[m
 [m
[32m+[m[32mGroup.registerOuterTreeReference = function(innerTree, outerTree, matcherMetaData,[m
[32m+[m	[32mtreeLength, treeIndex, initialStringIndex)[m
[32m+[m	[32mif not matcherMetaData.outerTreeReference[innerTree] and outerTree then[m
[32m+[m		[32mpdebug("<> Assign outerTreeReference[%s] = %s", innerTree, outerTree)[m
[32m+[m		[32mmatcherMetaData.outerTreeReference[innerTree] = {[m
[32m+[m			[32mtree = outerTree,[m
[32m+[m			[32mtreeLength = treeLength,[m
[32m+[m			[32mtreeIndex = treeIndex,[m
[32m+[m			[32minitialStringIndex = initialStringIndex[m
[32m+[m		[32m}[m
[32m+[m	[32mend[m
[32m+[m[32mend[m
[32m+[m
 Group.match = function([m
 		currentElement, treeMatcher,[m
 		flags, tree, treeLength, treeIndex,[m
 		splitStr, strLength,[m
 		stringIndex, initialStringIndex,[m
[31m-		matcherMetaData[m
[32m+[m		[32mmatcherMetaData,[m
[32m+[m		[32mignoreOuterTree[m
 	)[m
 [m
 	local groupTree = currentElement.tree[m
 [m
[31m-	if not matcherMetaData.outerTreeReference[groupTree] and tree then[m
[31m-		matcherMetaData.outerTreeReference[groupTree] = {[m
[31m-			tree = tree,[m
[31m-			treeLength = treeLength,[m
[31m-			treeIndex = treeIndex,[m
[31m-			initialStringIndex = initialStringIndex[m
[31m-		}[m
[31m-	end[m
[32m+[m	[32mpdebug(">< Received Group.match with groupTree %s and tree %s", groupTree, tree)[m
[32m+[m	[32mGroup.registerOuterTreeReference(groupTree, tree, matcherMetaData,[m
[32m+[m		[32mtreeLength, treeIndex, initialStringIndex)[m
 [m
 	local hasMatched, iniStr, endStr = treeMatcher([m
 		flags, groupTree, groupTree._index, 0,[m
 		splitStr, strLength,[m
 		stringIndex, stringIndex,[m
[31m-		matcherMetaData[m
[32m+[m		[32mmatcherMetaData,[m
[32m+[m		[32mignoreOuterTree[m
 	)[m
 [m
 	local groupIndex = currentElement.index or currentElement.name[m
[1mdiff --git a/expaghetti/magic/quantifier.lua b/expaghetti/magic/quantifier.lua[m
[1mindex bbdab6d..7fd4f23 100644[m
[1m--- a/expaghetti/magic/quantifier.lua[m
[1m+++ b/expaghetti/magic/quantifier.lua[m
[36m@@ -134,7 +134,8 @@[m [mlocal getMaximumOccurrencesOfElement = function([m
 			flags, nil, nil, nil,[m
 			splitStr, strLength,[m
 			stringIndex, initialStringIndex,[m
[31m-			matcherMetaData[m
[32m+[m			[32mmatcherMetaData,[m
[32m+[m			[32mnot true[m
 		)[m
 [m
 		if not hasMatched then[m
[36m@@ -182,6 +183,11 @@[m [mlocal matchBacktrackElement = function([m
 			matcherMetaData[m
 		)[m
 [m
[32m+[m		[32mprint('tree, hasMatched, iniStr, endStr', tree, hasMatched, iniStr, endStr,[m
[32m+[m		[32m'\n\tminimumOccurrences, maximumOccurrencesOfElement, occurrenceDirection', minimumOccurrences, maximumOccurrencesOfElement, occurrenceDirection)[m
[32m+[m
[32m+[m		[32mprint('matcherMetaData', p(matcherMetaData, nil, nil, 2*4))[m
[32m+[m
 		if hasMatched then[m
 			return hasMatched, iniStr, endStr, matcherMetaData[m
 		end[m
[36m@@ -253,7 +259,7 @@[m [mQuantifier.operateOver = function([m
 [m
 	local quantifier = currentElement.quantifier[m
 [m
[31m-	pdebug("@ Getting maximum occurrences for", p(quantifier))[m
[32m+[m	[32mpdebug("@ Getting maximum occurrences for", p(currentElement))[m
 	local maximumOccurrencesOfElement, endStringPositions = getMaximumOccurrencesOfElement([m
 		quantifier, currentElement, singleElementMatcher,[m
 		currentCharacter, treeMatcher,[m
[1mdiff --git a/expaghetti/matcher.lua b/expaghetti/matcher.lua[m
[1mindex 8cf546e..dfd2767 100644[m
[1m--- a/expaghetti/matcher.lua[m
[1m+++ b/expaghetti/matcher.lua[m
[36m@@ -20,7 +20,8 @@[m [mlocal singleElementMatcher = function([m
 		flags, tree, treeLength, treeIndex,[m
 		splitStr, strLength,[m
 		stringIndex, initialStringIndex,[m
[31m-		matcherMetaData[m
[32m+[m		[32mmatcherMetaData,[m
[32m+[m		[32mignoreOuterTree[m
 	)[m
 [m
 	if PositionCapture.isElement(currentElement) then[m
[36m@@ -37,7 +38,8 @@[m [mlocal singleElementMatcher = function([m
 			flags, tree, treeLength, treeIndex,[m
 			splitStr, strLength,[m
 			stringIndex - 1, initialStringIndex,[m
[31m-			matcherMetaData[m
[32m+[m			[32mmatcherMetaData,[m
[32m+[m			[32mignoreOuterTree[m
 		)[m
 	elseif Alternate.isElement(currentElement) then[m
 		return Alternate.match([m
[36m@@ -60,7 +62,8 @@[m [mlocal function treeMatcher([m
 		flags, tree, treeLength, treeIndex,[m
 		splitStr, strLength,[m
 		stringIndex, initialStringIndex,[m
[31m-		metaData[m
[32m+[m		[32mmetaData,[m
[32m+[m		[32mignoreOuterTree[m
 	)[m
 [m
 	debugCurrentStackFrame = debugCurrentStackFrame + 1[m
[36m@@ -75,7 +78,7 @@[m [mlocal function treeMatcher([m
 		}[m
 	end[m
 [m
[31m-	local outerTreeReference = metaData.outerTreeReference[tree][m
[32m+[m	[32mlocal outerTreeReference = not ignoreOuterTree and metaData.outerTreeReference[tree][m
 	local outerTree = outerTreeReference and outerTreeReference.tree[m
 	pdebug("\n%sStarting tree %s at position %d with outer tree being %s at position %s",[m
 		debugCurrentStackFrameStr,[m
[36m@@ -108,7 +111,8 @@[m [mlocal function treeMatcher([m
 				flags, tree, treeLength, treeIndex,[m
 				splitStr, strLength,[m
 				stringIndex, initialStringIndex,[m
[31m-				metaData[m
[32m+[m				[32mmetaData,[m
[32m+[m				[32mignoreOuterTree[m
 			)[m
 [m
 			pdebug("\t%s%salited stringIndex %d -> %q<%s> == %q", debugCurrentStackFrameStr,[m
[36m@@ -126,12 +130,17 @@[m [mlocal function treeMatcher([m
 		else[m
 			pdebug("\t%s@ Will quantify starting in stringIndex %d", debugCurrentStackFrameStr,[m
 				stringIndex)[m
[32m+[m			[32mif Group.isElement(currentElement) and currentElement.quantifier then[m
[32m+[m				[32mGroup.registerOuterTreeReference(currentElement.tree, tree, metaData,[m
[32m+[m					[32mtreeLength, treeIndex, initialStringIndex)[m
[32m+[m			[32mend[m
 			return Quantifier.operateOver([m
 				currentElement, currentCharacter, singleElementMatcher, treeMatcher,[m
 				flags, tree, treeLength, treeIndex,[m
 				splitStr, strLength,[m
 				stringIndex, initialStringIndex,[m
[31m-				metaData[m
[32m+[m				[32mmetaData,[m
[32m+[m				[32mignoreOuterTree[m
 			)[m
 		end[m
 	end[m
[36m@@ -145,6 +154,8 @@[m [mlocal function treeMatcher([m
 			stringIndex, outerTreeReference.initialStringIndex,[m
 			metaData[m
 		)[m
[32m+[m	[32melse[m
[32m+[m		[32mpdebug("&%sNo outerTreeReference", debugCurrentStackFrameStr)[m
 	end[m
 [m
 	return true, initialStringIndex + 1, stringIndex, metaData[m
[36m@@ -269,11 +280,11 @@[m [mend[m
 -- m("([bc]a)+", "abacate") -- valid (baca)[m
 -- m("a([bct]a?)+", "abacate") -- valid (abacat)[m
 -- m("([bct]a?)+", "abacate") -- valid (bacat)[m
[31m--- m("([bct]a?)+?", "abacate") -- valid (ba)[m
[32m+[m[32m--*m("([bct]a?)+?", "abacate") -- valid (ba)[m
 -- m("((((((((((((((((((((((((((((((((((.)?))))))))))))))))))))))))))?)))))))", '.') -- valid (.)[m
 -- m("(a??)", "abacate") -- valid ('')[m
 -- m(".?((a+()(((b+)))()))().?", "aaacbab") -- valid (bab)[m
[31m--- m("(x+x+)+()y", "xxxxxxxxxxy")[m
[32m+[m[32mm("(x+x+)+()y", "xxxxxxxxxxy")[m
 -- m("(b?c?a)+te", "abacate") -- valid (abacate)[m
 -- m("a(ba(c(a)(t)?e))e?", "abacate") -- valid (abacate)[m
 -- m("(ab?(cd?e)*f)+.", "ldskfsdpkabcdefacdefacefacdececdecefasjdoasdi") -- valid (abcdefacdefacefacdececdecefa)[m
[36m@@ -296,8 +307,13 @@[m [mend[m
 --m("([abc])*bcd", "abcd")[m
 --m("\"(?:\\\"|[^\"])*?\"", "\"\"\"")[m
 [m
[31m-m("(.+)?B", "AB") -- is B but should be AB[m
[32m+[m[32m--m("(.+)?B", "AB") -- is B but should be AB[m
 --m("([ab]*?)(?=(b))c", "abc") -- captures returning ini=0[m
 [m
[32m+[m[32m-- a+ won't backtrack on failure and it doesn't have outerTreeReference[m
[32m+[m[32m--m("(a+)+a", "aaaaa")[m
[32m+[m
[32m+[m[32m--*m("(a+|b+)c", "aaaaaaaadbbbbbbbbbbc")[m
[32m+[m[32m--*m("([ab]+)c", "aaaaaaaadbbbbbbbbbbc")[m
 [m
 return matcher[m
\ No newline at end of file[m
